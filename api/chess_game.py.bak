# chess_game.py
import os
import chess
import tkinter as tk
from tkinter import font, messagebox
import random
from anthropic import Anthropic
from tkfontchooser import askfont
import utilities  # Ensure this module is bundled

class ChessGame:
    def __init__(self):
        self.window = tk.Tk()
        self.window.title("Chess Game")
        
        # Get the default background color
        default_bg = self.window.cget('bg')
        
        # Create the fonts first
        self.window.tk.call('font', 'create', 'ElectraLTStd')
        self.window.tk.call('font', 'create', 'ElectraLTStdLarge')
        
        # Now configure them
        self.window.tk.call('font', 'configure', 'ElectraLTStd', '-family', 'Electra LT Std', '-size', 12)
        self.window.tk.call('font', 'configure', 'ElectraLTStdLarge', '-family', 'Electra LT Std', '-size', 24)
        
        # Define font references
        self.electra_font = 'ElectraLTStd'
        self.electra_font_large = 'ElectraLTStdLarge'
        
        # Initialize Anthropic client with API key
        api_key = os.getenv('ANTHROPIC_API_KEY')
        if not api_key:
            print("Warning: ANTHROPIC_API_KEY environment variable not set. Riddles will not be available.")
            self.anthropic = None
        else:
            self.anthropic = Anthropic(api_key=api_key)
        
        # Set minimum window size
        self.window.geometry("1200x900")
        self.window.minsize(1200, 600)
        
        # Create main frame with padding and center it
        self.main_frame = tk.Frame(self.window, bg=default_bg)
        self.main_frame.pack(expand=True, fill='both', padx=20, pady=20)
        
        # Create game area frame to hold board and message box
        self.game_area = tk.Frame(self.main_frame, bg=default_bg)
        self.game_area.pack(expand=True, fill='both')
        
        self.board = chess.Board()
        self.buttons = [[None for _ in range(8)] for _ in range(8)]
        self.selected_square = None
        self.difficulty = "easy"
        self.player_color = chess.WHITE
        
        # Create board frame
        board_container = tk.Frame(self.game_area)
        board_container.pack(side=tk.LEFT, expand=True)
        
        self.board_frame = tk.Frame(board_container)
        self.board_frame.pack(pady=(20,0))
        
        # Create message frame on the right with increased width
        self.message_frame = tk.Frame(self.game_area, width=400, bg=default_bg)
        self.message_frame.pack(side=tk.RIGHT, fill='both', padx=20, pady=20)
        self.message_frame.pack_propagate(False)
        
        # Create a container for the hint section
        hint_container = tk.Frame(self.message_frame, bg=default_bg)
        hint_container.pack(fill='both', expand=True)
        
        # Create title label
        tk.Label(hint_container, text="Hint:", font=self.electra_font, bg=default_bg).pack(anchor='center', padx=5, pady=(0, 5))
        
        # Create text widget for hint with scrollbar
        self.hint_text = tk.Text(hint_container, 
                               font=self.electra_font,
                               wrap=tk.WORD,
                               height=1,
                               width=40,
                               borderwidth=0,
                               highlightthickness=0,
                               bg=default_bg)
        self.hint_text.pack(fill='both', expand=True, padx=5)
        
        # Make text widget read-only
        self.hint_text.config(state=tk.DISABLED)
        
        # Create a frame for the new game button at the bottom of message_frame
        button_frame = tk.Frame(self.message_frame, bg=default_bg)
        button_frame.pack(side=tk.BOTTOM, pady=(0, 80))
        
        # Create new game button
        self.new_game_button = tk.Label(button_frame, 
                                      text="New Game", 
                                      font=self.electra_font,
                                      bg=default_bg,
                                      cursor="hand2")
        self.new_game_button.pack()
        self.new_game_button.bind("<Button-1>", lambda e: self.new_game())
        
        # Create controls frame below the board
        self.controls_frame = tk.Frame(board_container, bg=default_bg)
        self.controls_frame.pack(pady=20)
        
        # Create difficulty selection
        self.create_difficulty_selector()
        
        self.window.resizable(True, True)
        
    def create_difficulty_selector(self):
        controls_container = tk.Frame(self.controls_frame, bg=self.window.cget('bg'))
        controls_container.pack()
        
        tk.Label(controls_container, 
                text="Difficulty:", 
                font=self.electra_font,
                bg=self.window.cget('bg')).pack(side=tk.LEFT, padx=10)
        
        difficulties = ["Easy", "Medium", "Hard"]
        self.difficulty_var = tk.StringVar(value="Easy")
        
        for diff in difficulties:
            tk.Radiobutton(controls_container, 
                          text=diff, 
                          variable=self.difficulty_var,
                          value=diff, 
                          command=self.change_difficulty,
                          font=self.electra_font,
                          bg=self.window.cget('bg')).pack(side=tk.LEFT, padx=10)

    def create_board(self):
        square_size = 80
        
        for i in range(8):
            self.board_frame.grid_rowconfigure(i, weight=1)
            self.board_frame.grid_columnconfigure(i, weight=1)
        
        for row in range(8):
            for col in range(8):
                i = 7 - row
                color = "white" if (i + col) % 2 == 0 else "gray"
                button = tk.Button(self.board_frame, 
                                 bg=color,
                                 width=4,
                                 height=2,
                                 font=self.electra_font_large)
                button.grid(row=row, column=col, sticky="nsew")
                self.buttons[row][col] = button
                button.configure(command=lambda r=row, c=col: self.square_clicked(r, c))
        
        self.update_board_display()

    def change_difficulty(self):
        self.difficulty = self.difficulty_var.get().lower()

    def square_clicked(self, row, col):
        board_row = 7 - row
        board_square = board_row * 8 + col
        
        if self.selected_square is None:
            piece = self.board.piece_at(board_square)
            if piece and piece.color == self.player_color:
                self.selected_square = board_square
                self.buttons[row][col].config(bg='lightblue')
        else:
            move = chess.Move(self.selected_square, board_square)
            
            prev_square = self.selected_square
            prev_row = 7 - (prev_square // 8)
            prev_col = prev_square % 8
            self.buttons[prev_row][prev_col].config(bg='white' if (prev_row + prev_col) % 2 == 0 else 'gray')
            self.selected_square = None
            
            if move in self.board.legal_moves:
                self.board.push(move)
                self.update_board_display()
                
                if self.board.is_game_over():
                    self.show_game_over()
                else:
                    self.make_ai_move()

    def make_ai_move(self):
        if self.board.is_game_over():
            return
            
        moves = list(self.board.legal_moves)
        if not moves:
            return

        move = random.choice(moves)
        self.board.push(move)
        self.update_board_display()
        
        if self.board.is_game_over():
            self.show_game_over()
        else:
            # After AI moves, analyze the position and generate a hint for the player's best move
            self.window.after(200, self.generate_player_hint)

    def generate_player_hint(self):
        if not self.anthropic:
            return
            
        try:
            # Analyze current position for best player moves
            legal_moves = list(self.board.legal_moves)
            if not legal_moves:
                return
                
            # Select a strong move for the player (in a real implementation, 
            # you might want to use a chess engine here)
            suggested_move = random.choice(legal_moves)
            
            # Get the piece making the suggested move
            piece = self.board.piece_at(suggested_move.from_square)
            if not piece:
                return
                
            piece_type = chess.piece_name(piece.piece_type).capitalize()
            piece_color = "White" if piece.color else "Black"
            
            # Get surrounding pieces and board state
            # Get valid adjacent squares and their pieces
            adjacent_squares = [
                move.from_square + offset for offset in [-9, -8, -7, -1, 1, 7, 8, 9]
                if 0 <= move.from_square + offset < 64
            ]
            
            # Safely get nearby pieces
            nearby_pieces = []
            for sq in adjacent_squares:
                adj_piece = self.board.piece_at(sq)
                if adj_piece:
                    try:
                        piece_name = chess.piece_name(adj_piece.piece_type).capitalize()
                        nearby_pieces.append((chess.square_name(sq), piece_name))
                    except AttributeError:
                        continue
            
            difficulty_prompts = {
                "easy": f"Create a simple hint about moving the {piece_type} from {from_square} to {to_square}. {'A capture awaits!' if is_capture else ''}",
                
                "medium": f"Create a tactical chess hint about moving the {piece_type} from {from_square} to {to_square}. Consider these elements: {'Capture opportunity!' if is_capture else ''} {'Check is in the air!' if is_check else ''} Reference key squares under attack: {attacked_squares[:3]}.",
                
                "hard": f"Create a complex positional and tactical hint about the {piece_type} on {from_square}. Consider captures: {is_capture}, checks: {is_check}, attacked squares: {attacked_squares[:3]}, and defended squares: {defended_squares[:3]}. Focus on the critical move to {to_square}. Include deep strategic implications."
            }
            
            prompt = difficulty_prompts[self.difficulty.lower()]
            
            message = self.anthropic.messages.create(
                model="claude-3-opus-20240229",
                max_tokens=300,
                temperature=0.9,
                system="You are a master chess coach, skilled in providing insightful hints that guide players to find the best moves. Create hints that teach chess principles while not directly giving away the move. Consider tactical patterns, positional advantages, and strategic themes. Use appropriate chess terminology based on the difficulty level. Focus on helping players improve their chess understanding. Only output the hint text.",
                messages=[{
                    "role": "user",
                    "content": prompt
                }]
            )
            
            riddle = message.content[0].text.strip()
            self.hint_text.config(state=tk.NORMAL)
            self.hint_text.delete(1.0, tk.END)
            self.hint_text.insert(tk.END, riddle)
            self.hint_text.config(state=tk.DISABLED)
            
        except Exception as e:
            print(f"Error generating riddle: {e}")

    def update_board_display(self):
        piece_symbols = {
            'P': '♙', 'N': '♘', 'B': '♗', 'R': '♖', 'Q': '♕', 'K': '♔',
            'p': '♟', 'n': '♞', 'b': '♝', 'r': '♜', 'q': '♛', 'k': '♚'
        }
        
        for row in range(8):
            for col in range(8):
                square = (7 - row) * 8 + col
                piece = self.board.piece_at(square)
                text = piece_symbols.get(str(piece), ' ') if piece else ' '
                self.buttons[row][col].config(
                    text=text,
                    font=self.electra_font_large,
                    bg="white" if ((7 - row) + col) % 2 == 0 else "gray"
                )

    def new_game(self):
        self.board.reset()
        self.selected_square = None
        self.player_color = chess.WHITE
        for row in range(8):
            for col in range(8):
                color = "white" if ((7 - row) + col) % 2 == 0 else "gray"
                self.buttons[row][col].config(bg=color)
        self.update_board_display()
        self.hint_text.config(state=tk.NORMAL)
        self.hint_text.delete(1.0, tk.END)
        self.hint_text.config(state=tk.DISABLED)
        self.hint_text.config(height=1)

    def show_game_over(self):
        result = "Draw"
        if self.board.is_checkmate():
            result = "Black wins!" if self.board.turn == chess.WHITE else "White wins!"
        elif self.board.is_stalemate():
            result = "Stalemate!"
        
        messagebox.showinfo("Game Over", result, font=self.electra_font)

    def run(self):
        self.create_board()
        self.window.mainloop()

if __name__ == "__main__":
    from welcome_screen import WelcomeScreen
    welcome = WelcomeScreen()
    welcome.run()
